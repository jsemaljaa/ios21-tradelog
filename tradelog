#! /bin/bash
#! /bin/ksh
export POSSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

args=("$@")
args_count=${#args[@]}

if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
   helpFlag=1
fi

showHelp()
{
   echo "*******************************"
   echo "VUT FIT 2021/2022 letní semestr"
   echo "první projekt z předmětu IOS"
   echo "Alina Vinogradova, xvinog00"
   echo "*******************************"
   echo "A script for analyzing the record of the system for trading on the stock exchange."
   echo "Сan filter records and provide statistics according to user input."
   echo
   echo "Usage:     tradelog [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]"
   echo
   echo "           tradelog [-h|--help] print this message"
   echo
   echo "Allowed commands:"
   echo "list-tick          Showing the list of stock symbols present, the tickers"
   echo "profit             Showing statement of total profit on closed positions."
   echo "pos                Showing a statement of the values of the positions"
   echo "                   currently held in descending order of value."
   echo "last-price         Listing the last known price for each ticker."
   echo "hist-ord           Showing a histogram of the number of transactions according to ticker."
   echo "graph-pos          Listing of the chart of the values of the held"
   echo "                   positions according to the ticker."
   echo
   echo "Allowed filters:"
   echo "-a DATETIME        Only records AFTER this date (without this date) are considered."
   echo "-b DATETIME        Only records BEFORE this date (without this date) are considered."
   echo "                   DATETIME is in the format YYYY-MM-DD HH:MM:SS"
   echo "-t TICKER          Only entries corresponding to a given ticker are considered."
   echo "                   For multiple instances of the switch, the set of all listed tickers is taken."
   echo "-w WIDTH           Chart width adjustment. (WIDTH is a positive integer)."
}

getArgsFunc(){
   while true; do
      case $1 in
      -t ) # DONE
         if [[ -n "$2" ]] && [[ $2 =~ ^[A-Z]*$ ]]; then # Checking if there's ticker after -t
            ticker+=( "$2" )
            shift
         else 
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -a ) # DONE
         if [ -n "$2" ]; then
            if [[ $3 =~ ^[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$ ]]; then
               date_after="$2"
               date_after+=" $3"
               shift 2
            else 
               date_after="$2"
               shift 
            fi
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -b ) #DONE
         if [ -n "$2" ]; then
            if [[ $3 =~ ^[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$ ]]; then
               date_before="$2"
               date_before+=" $3"
               shift 2
            else 
               date_before="$2"
               shift 
            fi
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -w )
         if [ -n "$2" ];
         then
            width="$2"
            shift
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;
      
      * )
         return 1
      ;;
      esac
   done
}

getInput(){ # Funcion for getting files
   for (( i=0; i<args_count; i++ )); do # With knowing that the file names are very last arguments
      if [[ ${args[${i}]} =~ (.*)?\.(log) ]] || [[ ${args[${i}]} =~ (.*)?\.(log)?\.(gz) ]]; then
         fileNames+=( "${args[${i}]}" )
      fi
   done

   if [[ ${#fileNames[*]} -eq 1 ]]; then # A case for working with a single file
      if [[ ${fileNames[*]} =~ (.*)?\.(log)?\.(gz) ]]; then
         input="zcat ${fileNames[*]}"
         input=$(eval "$input")
      else
         input="cat ${fileNames[*]}" # The variable input contains lines from the log
         input=$(eval "$input")
      fi
   elif [[ ${#fileNames[*]} -gt 1 ]]; then # A case for working with multiple files
      filesCount=${#fileNames[*]}
      for (( n=0; n<filesCount; n++)); do
         input="cat ${fileNames[${n}]}"
         input+=$(eval "$input")
      done
   elif [[ ${#fileNames[*]} -eq 0 ]] && [[ $helpFlag != 1 ]]; then # A case for working without a file and with standart input
      input=$(</dev/stdin)
   fi
}

getFilteredInput(){
   if [[ -n "$ticker" ]]; then
      input=$(cat <<< "$input" | grep -w "${ticker[@]/#/-e}")
   fi

   if [[ -n "$date_after" ]]; then
      input=$(cat <<< "$input" | awk -F';' -v dateA="$date_after" '{if($1 > dateA) print $0}')
   fi

   if [[ -n "$date_before" ]]; then
      input=$(cat <<< "$input" | awk -F';' -v dateB="$date_before" '{if($1 < dateB) print $0}')
   fi
}

getInput "${args[@]}" "$args_count"
getArgsFunc "$@"
getFilteredInput "${ticker[@]}" "$date_after" "$date_before"

listtickFunc(){
   cat <<< "$input" | cut -d';' -f 2 | sort | uniq 
}

profitFunc(){
   cat <<< "$input" | awk -F';' '
      {if($3 == "buy") profit-=$4 * $6; else profit+=$4 * $6} END {printf("%6.2f\n", profit)}
      '
}

posFunc(){
   cat <<< "$input" | awk -F';' '{
    {prices[$2]=$4};
    ($3 == "buy")? count[$2]+=$6 : count[$2]-=$6;
    } 
    END {
        {for (c in count){printf("%-9s : %11.2f\n", c, prices[c]*count[c])}}
   }' | sort -t':' -k2nr
}

lastPriceFunc(){ #DONEEEEEEEEEEEE
   cat <<< "$input" | awk -F';' '{a[$2]=$2";"$4} END{for(var in a){print a[var]}}' | awk -F';' '{printf "%-9s : %7.2f\n", $1, $2}' | sort -u -k 1
}

histOrdFunc(){ #DONE
   cat <<< "$input" | cut -d';' -f2 | sort | uniq -c | cut -f1 | awk '{$1=sprintf("%-*s", $1, ""); gsub(" ", "#", $1); printf("%-10s: %s\n", $2, $1)}'
}



allFunc=( 'list-tick' 'profit' 'pos' 'last-price' 'hist-ord' 'graph-pos' )
funcFlag=0
for i in "${allFunc[@]}"; do
   for j in "$@"; do
      if [[ "${i}" = "${j}" ]]; then
         funcFlag=1
      fi
   done
done

if [[ $funcFlag = 1 ]]; then
   for i in "$@"; do
      # echo ${i}
      if [[ "${i}" = "-h" ]] || [[ "${i}" = "--help" ]]; then
         showHelp
      elif [[ "${i}" = "list-tick" ]]; then
         listtickFunc
      elif [[ "${i}" = "profit" ]]; then
         profitFunc
      elif [[ "${i}" = "pos" ]]; then
         posFunc
      elif [[ "${i}" = "last-price" ]]; then
         lastPriceFunc
      elif [[ "${i}" = "hist-ord" ]]; then
         histOrdFunc
      fi
      # elif [[ "${i}" = "graph-pos" ]]; then
   done
else cat <<< "$input"
fi