#! /bin/bash
export POSSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

args=("$@")
args_count=${#args[@]}


showHelp() # Funkce pro výstup popisu práce skriptu
{
   echo "*******************************"
   echo "VUT FIT 2021/2022 letní semestr"
   echo "první projekt z předmětu IOS"
   echo "Alina Vinogradova, xvinog00"
   echo "*******************************"
   echo "Skript pro analýzu záznamu systému pro obchodování na burze cenných papírů."
   echo "Může filtrovat záznamy a poskytovat statistiky podle vstupu uživatele."
   echo
   echo "Usage:     tradelog [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]"
   echo
   echo "           tradelog [-h|--help] vytiskne tuto zprávu"
   echo
   echo "Allowed commands:"
   echo "list-tick          Výpis seznamu vyskytujících se burzovních symbolů, tzv. 'tickerů.'"
   echo "profit             Výpis celkového zisku z uzavřených pozic."
   echo "pos                Výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty."
   echo "last-price         výpis poslední známé ceny pro každý ticker."
   echo "hist-ord           Výpis histogramu počtu transakcí dle tickeru."
   echo "graph-pos          Výpis grafu hodnot držených pozic dle tickeru."
   echo
   echo "Allowed filters:"
   echo "-a DATETIME        Jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data)."
   echo "-b DATETIME        Jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data)."
   echo "                   DATETIME je formátu YYYY-MM-DD HH:MM:SS"
   echo "-t TICKER          Jsou uvažovány pouze záznamy odpovídající danému tickeru."
   echo "                   Při více výskytech přepínače se bere množina všech uvedených tickerů."
   echo "-w WIDTH           U výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH."
   echo "                   WIDTH je celé kladné číslo."
}

if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
   helpFlag=1
   showHelp
fi

getArgsFunc(){ # Funkce pro získání argumentů-filtrů
   while true; do
      case $1 in
      -t )
         if [[ -n "$2" ]] && [[ $2 =~ ^[A-Z]*$ ]]; then # Kontrola, zda je ticker after -t
            ticker+=( "$2" ) # Všechny tickery budou uloženy v poli
            shift
         else 
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -a )
         if [ -n "$2" ]; then
            if [[ $3 =~ ^[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$ ]]; then # Kontrola formy přenosu argumentu DATETIME (buď to -a "DATETIME" nebo -a DATETIME )
               date_after="$2"
               date_after+=" $3"
               shift 2
            else 
               date_after="$2"
               shift 
            fi
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -b )
         if [ -n "$2" ]; then
            if [[ $3 =~ ^[0-2][0-9]:[0-6][0-9]:[0-6][0-9]$ ]]; then
               date_before="$2"
               date_before+=" $3"
               shift 2
            else 
               date_before="$2"
               shift 
            fi
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;

      -w )
         if [ -n "$2" ] && [ "$2" > 0 ]; # Kontrola, zda width je celé kladné číslo
         then
            width="$2"
            shift
         else
            echo "Error! Try ./tradelog [-h | --help] for help"
            exit 1
         fi
         shift
      ;;
      
      * )
         return 1
      ;;
      esac
   done
}

getInput(){ # Funcion for getting files
   for (( i=0; i<args_count; i++ )); do # Procházíme všemi argumenty
      if [[ ${args[${i}]} =~ (.*)?\.(log) ]] || [[ ${args[${i}]} =~ (.*)?\.(log)?\.(gz) ]]; then # a kontrolujeme, které z nich jsou názvy souborů
         fileNames+=( "${args[${i}]}" ) # Názvy souborů jsou uloženy v poli
      fi
   done

   if [[ ${#fileNames[*]} -eq 1 ]]; then # Případ pro práci s jedním souborem
      if [[ ${fileNames[*]} =~ (.*)?\.(log)?\.(gz) ]]; then # Kontrolujeme, zda pracujeme s archivem .gz
         input="zcat ${fileNames[*]}" 
         input=$(eval "$input") # Obsah souborů .gz bude uložen v proměnné input
      else
         input="cat ${fileNames[*]}"
         input=$(eval "$input") # Obsah souborů .log bude uložen v proměnné input
      fi
   elif [[ ${#fileNames[*]} -gt 1 ]]; then # Případ pro práci s více soubory
      filesCount=${#fileNames[*]}
      for (( n=0; n<filesCount; n++)); do
         input="cat ${fileNames[${n}]}"
         input+=$(eval "$input") # Obsah více souborů bude postupně uložen do proměnné input
      done
   elif [[ ${#fileNames[*]} -eq 0 ]] && [[ $helpFlag != 1 ]]; then # Případ pro práci bez souboru a se standartním vstupem
      input=$(</dev/stdin) # Proměnná input čeká na vstup ze stdin
   fi
}

getFilteredInput(){
   if [[ -n "$ticker" ]]; then # Pokud je zadán ticker/tickery, bude obsah souboru přepsán na řádky obsahující ticker
      input=$(cat <<< "$input" | grep -w "${ticker[@]/#/-e}")
   fi

   if [[ -n "$date_after" ]]; then 
      input=$(cat <<< "$input" | awk -F';' -v dateA="$date_after" '{if($1 > dateA) print $0}')
   fi

   if [[ -n "$date_before" ]]; then # Pokud je zadán -b datetime, bude obsah souboru přepsán na řádky před tímto datem
      input=$(cat <<< "$input" | awk -F';' -v dateB="$date_before" '{if($1 < dateB) print $0}')
   fi
}

listtickFunc(){
   cat <<< "$input" | cut -d';' -f 2 | sort | uniq 
}

profitFunc(){
   cat <<< "$input" | awk -F';' '
      {if($3 == "buy") profit-=$4 * $6; else profit+=$4 * $6} END {printf("%1.2f\n", profit)}
      '
}

posFunc(){
   cat <<< "$input" | awk -F';' '{
    {prices[$2]=$4};
    ($3 == "buy")? count[$2]+=$6 : count[$2]-=$6;
    } 
    END {
        {for (c in count){printf("%-9s : %11.2f\n", c, prices[c]*count[c])}}
   }' | sort -t':' -k2nr
}

lastPriceFunc(){
   cat <<< "$input" | awk -F';' '{a[$2]=$2";"$4} END{for(var in a){print a[var]}}' | awk -F';' '{printf "%-9s : %7.2f\n", $1, $2}' | sort -u -k 1
}

histOrdFunc(){
   if [ -z "$width" ]; then
      width=1
   fi
   num=$(cat <<< "$input" | cut -d';' -f2 | sort | uniq -c | cut -f1 | awk -v w="$width" '{if(num<$1) num=$1} END{{num=num/w};{print num}}')
   #echo "$num"
   cat <<< "$input" | cut -d';' -f2 | sort | uniq -c | cut -f1 | awk -v w="$width" '{
                                                   {maxW=int($1/w)};
                                                   maxW=sprintf("%-*s", maxW, ""); 
                                                   gsub(" ", "#", maxW); 
                                                   printf("%-10s: %s\n", $2, maxW)}'
}

graphPosFunc(){
   if [ -z "$width" ]; then
      width=1000
   fi

   num=$(posFunc | awk -v w="$width" '
      function abs(v) {return v < 0 ? -v : v}
      {{if(num < abs($3)) num=abs($3)};
      }
      END {
         {num=int(num/w)};
         {printf "%6.2f", num}
      }')
   # echo "$num"
   posFunc | awk -v w="$num" '{
      {maxW=int($3/w)}; {if(maxW>0)
                  {
                     maxW=sprintf("%-*s", maxW, ""); 
                     gsub(" ", "#", maxW);
                     printf("%-10s: %s\n", $1, maxW);
                  }
                  else if(maxW<0)
                  {
                     maxW=sprintf("%-*s", maxW, ""); 
                     gsub(" ", "!", maxW);
                     printf("%-10s: %s\n", $1, maxW);
                  }
                  else if(maxW==0)
                  {
                     printf("%-10s:\n", $1);
                  }}
            }' | sort
}

getInput "${args[@]}" "$args_count"
getArgsFunc "$@"
getFilteredInput "${ticker[@]}" "$date_after" "$date_before"

allFunc=( 'list-tick' 'profit' 'pos' 'last-price' 'hist-ord' 'graph-pos' )
funcFlag=0
for i in "${allFunc[@]}"; do
   for j in "$@"; do
      if [[ "${i}" = "${j}" ]]; then
         funcFlag=1
      fi
   done
done

if [[ $funcFlag = 1 ]]; then
   for i in "$@"; do
      if [[ "${i}" = "list-tick" ]]; then
         listtickFunc
      elif [[ "${i}" = "profit" ]]; then
         profitFunc
      elif [[ "${i}" = "pos" ]]; then
         posFunc
      elif [[ "${i}" = "last-price" ]]; then
         lastPriceFunc
      elif [[ "${i}" = "hist-ord" ]]; then
         histOrdFunc
      elif [[ "${i}" = "graph-pos" ]]; then
         graphPosFunc
      fi
   done
else cat <<< "$input"
fi